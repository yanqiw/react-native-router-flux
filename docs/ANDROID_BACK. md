Android back action
====
This is an example to handle `back button action` in android.

The reducer will throw an error when the back button is clicked on root scenes. You can catch the error, and handle the back action as you want.

# Example

`main.js`
```Javascript
import { BackAndroid } from 'react-native';
import {Reducer} from 'react-native-router-flux';

backButtonPressedOnceToExit = false;

let currentSceneName = null;
const reducerCreate = params=>{
    const defaultReducer = Reducer(params);
    return (state, action)=>{
        console.info("reducerCreate.{state,action}", state, action);
        var nextState = defaultReducer(state, action);
        console.info("reducerCreate.nextState:", nextState);
        //do something...
        currentSceneName = getCurrentName(nextState);
        return nextState
    }
};

function getCurrentName(obj) {
  const { index, children, name } = obj;
  if (index !== undefined) {
    if (children) {
      return getCurrentName(children[index]);
    }
  }
  return name;
}

export default class Main extends React.Component {
...
  componentWillMount(){
    BackAndroid.addEventListener('hardwareBackPress', this.onBackAndroid.bind(this));
  }

  componentWillUnmount(){
    BackAndroid.removeEventListener('hardwareBackPress', this.onBackAndroid.bind(this));
    }

  onBackAndroid() {

        if (backButtonPressedOnceToExit) {
            BackAndroid.exitApp();
        } else {
            if ([
              'tab1',
              'tab2',
              'tab3',
              'tab4',
              'tab5'
            ].indexOf(currentSceneName) === -1) {
                Actions.pop();
                return true;
            } else {
                backButtonPressedOnceToExit = true;
                console.log('Press again to exit APP');

                setTimeout(function() {
                    backButtonPressedOnceToExit = false;
                }, 2000);
                return true;
            }
        }

    }
...
}




```
